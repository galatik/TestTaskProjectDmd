@inject TaskService taskService
@model TestTask.Models.Task

@{
    ViewData["Title"] = "Index";

    var hasSubTasks = taskService.GetClosestDescendantTasks(Model.Id).Any();
}

<div class="row justify-content-center">
    <div class="col-11  task-wrapp">
        <div class="row">
            <div class="col-11">
                <div class="d-flex align-items-center justify-content-between task-info-header">
                    <div class="col-auto">
                        <h3>@Model.Name</h3>
                    </div>
                    @switch (Model.Status)
                    {
                        case TestTask.Models.TaskStatus.Assigned:
                            <button type="button" class="btn btn-primary">Assigned</button>
                            break;
                        case TestTask.Models.TaskStatus.Completed:
                            <button type="button" class="btn btn-success">Completed</button>
                            break;
                        case TestTask.Models.TaskStatus.InPerform:
                            <button type="button" class="btn btn-warning">In perform</button>
                            break;
                        case TestTask.Models.TaskStatus.Suspended:
                            <button type="button" class="btn btn-secondary">Suspended</button>
                            break;
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <ul class="list-group w-100 list-group-flush">
                <li class="list-group-item"><strong>Performers:</strong> @Model.Performers</li>
                <li class="list-group-item"><strong>Planned laboriusness:</strong> @Model.PlannedLaboriousness hum/hour </li>
                <li class="list-group-item"><strong>Planned completion time:</strong>@Model.CompletionTime.ToString() </li>
                @if (hasSubTasks)
                {
                    <li class="list-group-item"><strong>Planned laboriusness of descendant tasks:</strong>@await taskService.GetPlannedLaboriousnessWithDescendant(Model.Id) hum/hour</li>
                    <li class="list-group-item"><strong>Planned completion time of descendant tasks:</strong>@await taskService.GetCompletionTimeWithDescendant(Model.Id)</li>
                }
                <li class="list-group-item"><strong>Description:</strong><br>@Model.Description</li>
            </ul>
        </div>
        <div class="row subtasks-info-conteiner">
            <div class="d-flex col-12 align-items-center bg-primary subtasks-info-header no-gutters">
                <h4>Subtasks:</h4>
            </div>
            <div  class="col-12">
                <ul class="list-group">

                    @foreach (var task in taskService.GetClosestDescendantTasks(Model.Id))
                    {
                        <a asp-action="index" asp-controller="task" asp-route-id="@task.Id" class="list-group-item d-flex justify-content-between align-items-center">
                            @task.Name

                            @switch (task.Status)
                            {
                                case TestTask.Models.TaskStatus.Assigned:
                                    <span class="badge badge-primary badge-pill">Assigned</span>
                                    break;
                                case TestTask.Models.TaskStatus.Completed:
                                    <span class="badge badge-success badge-pill">Completed</span>
                                    break;
                                case TestTask.Models.TaskStatus.InPerform:
                                    <span class="badge badge-warning badge-pill">In perform</span>
                                    break;
                                case TestTask.Models.TaskStatus.Suspended:
                                    <span class="badge badge-secondary badge-pill">Suspended</span>
                                    break;
                            }
                        </a>
                    }
                </ul>
                <div class="row justify-content-center task-btn-create-wrapp">
                    <a asp-action="create" asp-controller="task" asp-route-id="@Model.Id"  class="btn btn-success task-btn-create" role="button">+</a>
                </div>
            </div>
            <div class="d-flex w-100 justify-content-around task-btn-wrapp align-items-center">
                
                    <a class="btn btn-primary " asp-action="edit" asp-controller="task" asp-route-id="@Model.Id" role="button">Edit task</a>
                
                
                    <a class="btn btn-danger" asp-action="delete" asp-controller="task" asp-route-id="@Model.Id" role="button">Delete task</a>
                
            </div>
        </div>
    </div>
</div>